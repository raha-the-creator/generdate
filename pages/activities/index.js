import React from "react";
import { createClient } from "contentful";
import Head from "next/head";
import ActivityCard from "../../comps/ActivityCard";
import { useState, useEffect, useMemo, useCallback } from "react";
import MultiSelect from "multiselect-react-dropdown";
import NoResults from "../../public/noresults.gif";
import Image from "next/image";

import Pagination from "../../comps/Pagination";
import { paginate } from "../../helpers/paginate";

export async function getStaticProps() {
  const client = createClient({
    space: process.env.CONTENTFUL_SPACE_ID,
    accessToken: process.env.CONTENTFUL_ACCESS_KEY,
  });

  const res = await client.getEntries({ content_type: "locations" });

  return {
    props: {
      locations: res.items,
      revalidate: 5
    },
  };
}

export default function Locations({ locations }) {
  const [query, setQuery] = useState("");
  const [selectedTags, setSelectedTags] = useState([]);
  const [filteredLocations, setFilteredLocations] = useState(locations);
  const [currentPage, setCurrentPage] = useState(1);
  const pageSize = 9;

  // Pagination
  const onPageChange = (page) => {
    setCurrentPage(page);
    window.scrollTo(0, 0);
  };

  const paginatedPosts = useMemo(() => {
    return paginate(filteredLocations, currentPage, pageSize);
  }, [filteredLocations, currentPage, pageSize]);

  useEffect(() => {
    const filtered = filterLocationsByTagsAndQuery(
      locations,
      selectedTags,
      query
    );
    setFilteredLocations(filtered);
    setCurrentPage(1); // reset current page to 1 when filter changes
  }, [locations, selectedTags, query]);

  // Filtering
  const filterLocationsByTagsAndQuery = useCallback(() => {
    let filteredLocations = locations;

    // Filter by tags
    if (selectedTags.length > 0) {
      filteredLocations = filteredLocations.filter((location) =>
        selectedTags.every(
          (tag) =>
            location.fields.tags.includes(tag.name) ||
            (tag.name === "$" && location.fields.price === tag.name) ||
            (tag.name === "$$" && location.fields.price === tag.name) ||
            (tag.name === "$$$" && location.fields.price === tag.name) ||
            (tag.name === "FREE" && location.fields.price === tag.name) ||
            location.fields.city.includes(tag.name)
        )
      );
    }

    // Filter by query
    if (query) {
      filteredLocations = filteredLocations.filter((location) =>
        location.fields.name.toLowerCase().includes(query.toLowerCase())
      );
    }

    return filteredLocations;
  }, [locations, selectedTags, query]);

  const handleTagSelect = (selectedList, selectedItem) => {
    setSelectedTags(selectedList);
  };

  // Clear filters
  const clearFilters = () => {
    setSelectedTags([]);
    setQuery("");
  };

  const filterTags = [
    { cat: "Activity Type", name: "Outdoor" },
    { cat: "Activity Type", name: "Indoor" },
    { cat: "Activity Type", name: "Eating" },
    { cat: "Activity Type", name: "Park" },
    { cat: "Activity Type", name: "Entertainment" },
    { cat: "Activity Type", name: "Shopping" },
    { cat: "Activity Type", name: "Pictures" },
    { cat: "Activity Type", name: "Beach" },
    { cat: "Activity Type", name: "Exploring" },
    { cat: "Activity Type", name: "Arcade" },
    { cat: "Activity Type", name: "View" },
    { cat: "Price", name: "FREE" },
    { cat: "Price", name: "$" },
    { cat: "Price", name: "$$" },
    { cat: "Price", name: "$$$" },
    { cat: "Location", name: "Squamish" },
    { cat: "Location", name: "Richmond" },
    { cat: "Location", name: "Vancouver" },
    { cat: "Location", name: "North Vancouver" },
    { cat: "Location", name: "West Vancouver" },
    { cat: "Location", name: "Burnaby" },
    { cat: "Location", name: "Coquitlam" },
    { cat: "Location", name: "New Westminster" },
    { cat: "Location", name: "Port Moody" },
    { cat: "Location", name: "Other" },
  ];

  return (
    <>
      <Head>
        <title>Activities search</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/icon.png" />
      </Head>

      <main class="flex flex-col w-full h-full text-center justify-center items-center">
        <div class="flex flex-col bg-white rounded-lg w-11/12 justify-start items-center my-1">
          <div className="w-full">
            {/* FILTERS */}
            <div className="z-40 sticky top-16 p-2 bg-white">
              <div className="flex items-center">
                <h2 class="text-left text-xl font-roboto-mono font-bold my-2">
                  Activities to explore
                </h2>
              </div>
              <div class="flex flex-col md:flex-row">
                <div class="flex w-full flex-grow-0 flex-shrink-0 md:w-1/2">
                  <input
                    type="text"
                    value={query}
                    onChange={(e) => setQuery(e.target.value)}
                    placeholder="Search by activity name"
                    className="w-full inline-block rounded box-border border-solid border border-gray-300 p-2 text-sm"
                  />
                </div>
                <div class="flex items-center justify-center w-full h-16 md:w-1/2 md:h-10">
                  <div class="w-full flex-1 h-10 px-2 pt-1">
                    <MultiSelect
                      options={filterTags}
                      selectedValues={selectedTags}
                      groupBy="cat"
                      onSelect={handleTagSelect}
                      onRemove={handleTagSelect}
                      displayValue="name"
                      placeholder="Filter by other parameters"
                      style={{
                        chips: { background: "#C42455" },
                        "&:hover": { background: "#fad" },
                      }}
                      className="text-sm w-full"
                      closeIcon={false}
                    />
                  </div>
                </div>

                <button
                  className="box-border border-solid border bg-pink-700 text-sm font-medium text-white rounded mx-1 px-3 "
                  onClick={clearFilters}
                >
                  Clear filters
                </button>
              </div>
            </div>

            <br></br>

            {paginatedPosts.length > 0 ? (
              <div class="flex flex-row flex-wrap w-full">
                {paginatedPosts.map((location) => (
                  <ActivityCard
                    key={location.sys.id}
                    link={`/activities/${location.fields.slug}`}
                    as={`/activities/${location.fields.slug}`}
                    img={
                      "https:" + location.fields.featureImage.fields.file.url
                    }
                    header={location.fields.name}
                    price={location.fields.price}
                    city={location.fields.city}
                    tags={location.fields.tags}
                  />
                ))}
              </div>
            ) : (
              <div className="w-full h-96 flex flex-col items-center justify-center">
                <Image
                  src={NoResults}
                  alt="No results found"
                  width={120}
                  height={120}
                />
                <p className="text-xl font-bold">No results found</p>
              </div>
            )}

            {paginatedPosts.length > 0 && (
              <div className="flex w-auto justify-center">
                <Pagination
                  items={filteredLocations.length} // 49
                  currentPage={currentPage}
                  pageSize={pageSize}
                  onPageChange={onPageChange}
                />
              </div>
            )}
          </div>
        </div>
      </main>
    </>
  );
}
